import pygame
import random

class MovingObject:
    "This class represents any moving object in the game."

    # A storage for images, so that they aren't loaded each time
    # another object uses the same image is
    imagestore = {}

    def __init__(self, path, start, end, speed,
                 origin = (0,0), repeat=False,
                 adjust_start = (0,0), adjust_end = (0,0)):
        """
        Create a new moving object.

        Mandatory Arguments:
          path:          the file path to the image to display
          start:         the pixel at which the movement starts
          end:           the pixel at which the movement ends
          speed:         the fraction of the distance to move per second

        Optional arguments:
          origin:        which point of the image to use for placement
          repeat:        whether to repeat the movement
          adjust_start:  adjustment of the start position
          adjust_end:    adjustment of the end position

        All coordinates in the optional arguments are in units of
        image width or image height, as opposed to pixel coordinates
        as used in the mandatory arguments. For example, if the image
        has width of 5 pixels and height of 4 pixels, the arguments

           start = (5,5), adjust_start = (-1,0.5)

        will result in an actual starting point of (0,7).
        """
        if not path in MovingObject.imagestore:
            MovingObject.imagestore[path] =\
                 pygame.image.load(path).convert_alpha()
        self.image = MovingObject.imagestore[path]

        width = self.image.get_width()

        self.start = tuple(s + width * a for s,a in zip(start,adjust_start))
        self.end = tuple(e + width * a for e,a in zip(end,adjust_end))

#        self.vspeed = tuple(speed*(e-s) for e,s in zip(self.end,self.start))
        self.repeat = repeat

        self.pos = self.start

        self.speed = speed
        self.dist = 0

        self.disp = (-self.image.get_width()*origin[0],
                     -self.image.get_height()*origin[1])

        self.active = True

    def move(self, seconds):
        if self.active:
            self.dist += self.speed * seconds
            if self.dist > 1:
                if self.repeat:
                    self.dist = 0
                else:
                    self.active = False

    def position(self, displace = False):
        return tuple(s + self.dist*(e-s) + (d if displace else 0)
                     for e, s, d in zip(self.end, self.start, self.disp))

    def draw_on(self, surface):
        """Draw the object on a pygame surface, if active"""
        if self.is_active():
            surface.blit(self.image, self.position(True))

    def is_active(self):
        return self.active

    def deactivate(self):
        self.active = False

class Game:
    "The game"

   # some global game parameters
    max_subs = 10
    max_bombs = 10

    c_background = (0,127,255)
    c_water = (0,0,255)

    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.waterline = int(0.2*height)

        self.running = False

        pygame.init()
        self.screen = pygame.display.set_mode((width,height))
        pygame.display.set_caption("U-Boot")
        pygame.mouse.set_visible(False)
        pygame.key.set_repeat(0)

        self.clock = pygame.time.Clock()
        self.fps = 60

        # create the ship
        self.ship = MovingObject("schiff.png",
                                 start = (0, self.waterline),
                                 adjust_start = (-1,0),
                                 end = (self.width, self.waterline),
                                 speed = 0.1,
                                 origin = (0,1),
                                 repeat = True)

        # initially there are no submarines nor bombs
        self.submarines = []
        self.bombs = []

        # spawn a submarine on average every 3 seconds
        self.p_spawn = 1/(3*self.fps)

    def draw(self):
        self.screen.fill(Game.c_background)
        pygame.draw.rect(self.screen, Game.c_water,
                         (0,
                          self.waterline,
                          self.width,
                          self.height - self.waterline))

        self.ship.draw_on(self.screen)

        for sub in self.submarines:
            sub.draw_on(self.screen)

        for bomb in self.bombs:
            bomb.draw_on(self.screen)

        pygame.display.flip()

    def drop_bomb(self):
        pass

    def spawn_submarine(self):
        if random.uniform(0,1) < self.p_spawn:
            ship_speed = self.ship.speed

            total_depth = self.height - self.waterline
            min_depth = 0.1*total_depth + self.waterline
            max_depth = self.height - 20
            sub_depth = random.uniform(min_depth, max_depth)
            sub_speed = random.uniform(0.5*ship_speed, 2*ship_speed)

            newsub = MovingObject("Uboot.png",
                                  start = (self.width, sub_depth),
                                  end = (0, sub_depth),
                                  adjust_end = (-1,0),
                                  speed = sub_speed)
            
            self.submarines.append(newsub)                  

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_q:
                    pygame.event.post(pygame.event.Event(pygame.QUIT))
                if event.key == pygame.K_DOWN:
                    self.drop_bomb()

    def update_state(self):
        # move all objects
        self.ship.move(1/self.fps)

        for sub in self.submarines:
            sub.move(1/self.fps)

        for bomb in self.bombs:
            sub.move(1/self.fps)

        # remove inactive objects
        self.submarines = [sub for sub in self.submarines if sub.is_active()]
        self.bombs = [bomb for bomb in self.bombs if bomb.is_active()]

        # spawn new submarines at random
        if len(self.submarines) < Game.max_subs:
            self.spawn_submarine()

    def run(self):
        self.running = True
        while self.running:
            self.draw()
            self.clock.tick(60)
            self.handle_events()
            self.update_state()

def main():
    game = Game(1024,768)
    game.run()

if __name__=='__main__':
    main()
